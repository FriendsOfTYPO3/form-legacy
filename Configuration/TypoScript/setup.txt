# Replace rendering of old mailform

tt_content.mailform >
tt_content.mailform = COA
tt_content.mailform.10 = < lib.stdheader
tt_content.mailform.20 = FORM
tt_content.mailform.20 {
	stdWrap.wrap = <div class="csc-mailform"> | </div>
	stdWrap {
		editIcons = tt_content: bodytext
		editIcons.iconTitle.data = LLL:EXT:css_styled_content/pi1/locallang.xlf:eIcon.form

		prefixComment = 2 | Mail form inserted:
	}
}

lib.tx_form.html.universalAttributes {
	10 = id
	20 = class
	30 = accesskey
	40 = contenteditable
	50 = contextmenu
	60 = dir
	70 = draggable
	80 = dropzone
	90 = hidden
	100 = lang
	110 = spellcheck
	120 = style
	130 = tabindex
	140 = title
	150 = data-*
}

lib.tx_form.htmlAttributesUsedByTheViewHelperDirectly.abstractTagBasedViewHelper {
	10 = class
	20 = dir
	30 = id
	40 = lang
	50 = style
	60 = title
	70 = accesskey
	80 = tabindex
	90 = onclick
}

lib.tx_form.htmlAttributesUsedByTheViewHelperDirectly.abstractFormFieldViewHelper =< lib.tx_form.htmlAttributesUsedByTheViewHelperDirectly.abstractTagBasedViewHelper
lib.tx_form.htmlAttributesUsedByTheViewHelperDirectly.abstractFormFieldViewHelper {
	150 = name
	160 = value
}

lib.tx_form.registeredElements.defaultModelDescription {
		# compatibilityMode
		# Used by: frontend
		# Overwriteable by user: TRUE
		#
		# If set to 1 tx_form acts almost like before.
		# The following things dont work if compatibilityMode = 0:
		# This settings can be overwritten in the FORM object
		# toDo: more description
	compatibilityMode = 1

		# themeName
		# Used by: frontend,  wizard (not implemented at this time)
		# Overwriteable by user: TRUE
		#
		# The theme name for the templating.
		# At this time there are 2 themes.
		# Default: a template that looks similar to the previous form extension.
		# Compatibility: This template try to imitate the old form behavior.
		# If a compatibilityMode = 1 and a layout.xxx is set in the user definded
		# typoscript, the theme name switch automatically to the Compatibility theme
		#
		# This settings can be overwritten in the FORM object
		# This settings can be overwritten in the FORM object
		# toDo: more description
	themeName = Default

		# htmlAttributes
		# Used by: frontend, wizard (not implemented at this time)
		# Overwriteable by user: FALSE
		#
		# The allowed html attributes for this element, based on selfhtml
		# documentation version 8.1.2 http://wiki.selfhtml.org/wiki/Referenz:HTML/
		# We need this to dedect and map this strings in the user configured element definition as html attributes
		# There is a special magic
		# If you define prefix-*. That registers every attribute (that follow this synthax)
		# that is found in the user configured element automaicly as a html attribute.
		# prefix-xyz found in the user configured element is automaticly set as a
		# html attribute.
	htmlAttributes =< lib.tx_form.html.universalAttributes

		# defaultHtmlAttributeValues
		# Used by: frontend, wizard (not implemented at this time)
		# Overwriteable by user: FALSE
		#
		# This values are set if there is no entry in the user configured element
	defaultHtmlAttributeValues =

		# fixedHtmlAttributeValues
		# Used by: frontend, wizard (not implemented at this time)
		# Overwriteable by user: FALSE
		#
		# This attributes are automaticly set to this values
	fixedHtmlAttributeValues =

		# htmlAttributesUsedByTheViewHelperDirectly
		# Used by: frontend
		# Overwriteable by user: FALSE
		#
		# Each html attribute defined at "htmlAttributes" is available
		# in the model as a array.
		# This array will be added directly to the resulting HTML tag.
		# For this purpose the Argument "additionalAttributes" from the
		# ViewHelper is used.
		# But some html attributes has to be assigned as an argument to the viewhelper.
		# The htmlAttributesUsedByTheViewHelperDirectly map is used
		# to remove the specified html attribute from the "htmlAttributes" array
		# and put this into the models "additionalArguments" array
		# There are two attributes which special behavior:
		# disabled and redonly can be assigned to the most viewhelpers,
		# but whenever a disabled-tag appears, the browser will disable the element
		# no matter of the value.
		# See: https://forge.typo3.org/issues/42474
		# So we hold it in the htmlAttributes array and the code remove this attribute
		# if its value is set to 0
	htmlAttributesUsedByTheViewHelperDirectly =

		# name
		# Used by: frontend, wizard (not implemented at this time)
		# Overwriteable by user: TRUE
		#
		# This is the name of the element
		# If the name is not defined it is automatically generated
		# using the following syntax: id-{element_counter}
		# The name attribute will be transformed if it contains some
		# non allowed characters:
		# - spaces are changed into hyphens
		# - remove all characters except a-z A-Z 0-9 _ -
	name =

		# id
		# Used by: frontend, wizard (not implemented at this time)
		# Overwriteable by user: TRUE
		#
		# This is the id of the element
		# If the id is not defined it is automatically generated
		# using the following syntax: field-{element_counter}
		# The id attribute will be transformed if it contains some
		# non allowed characters:
		# - spaces are changed into hyphens
		# - if the id start with a integer then transform it to field-{integer}
		# - remove all characters expect a-z A-Z 0-9 _ - : .
	id =

		# partialPath
		# Used by: frontend, wizard (not implemented at this time)
		# Overwriteable by user: TRUE
		#
		# This partial is used to render the element
		# The partial paths to the element are build by the following rule
		# {$plugin.tx_form.view.partialRootPath}/{$themeName}/@actionName/{$partialPath}
	partialPath =

		# viewHelperDefaulArguments
		# Used by: frontend
		# Overwriteable by user: FALSE
		#
		# This helper array is used to cast some values needed by the
		# viewhelpers. E.g the f:form viewhelper need a array for the
		# argument "additionalParams". If additionalParams are not defined
		# in the users form typoscript, this results in a NULL value in the
		# templating variable "{model.additionalArguments.additionalParams}"
		# and this throws an error. The most of the viewhelper arguments
		# are strings and/or can handle such NULL values, but there are some
		# viewhelpers where we need some typecasting.
	viewHelperDefaulArguments =

		# childsInerhitName
		# Used by: frontend
		# Overwriteable by user: FALSE
		#
		# If set to 1 all child elements inerhit the name of
		# the parent element
		#
		# toDo: description
	childsInerhitName = 0

		# visibleInShowAction
		# Used by: frontend
		# Overwriteable by user: TRUE
		#
		# If set to 1 this Element is displayed in the formular
		#
		# toDo: description
	visibleInShowAction = 1

		# visibleInConfirmationAction
		# Used by: frontend
		# Overwriteable by user: TRUE
		#
		# If set to 1 this Element is displayed in the confirmation page
		#
		# toDo: description
	visibleInConfirmationAction = 1

		# visibleInProcessAction
		# Used by: frontend
		# Overwriteable by user: TRUE
		#
		# If set to 1 this Element is displayed in the mail
		#
		# toDo: description
	visibleInMail = 1
}

plugin.tx_form {
	view {
		templateRootPaths {
			10 = {$plugin.tx_form.view.templateRootPath}
		}
		partialRootPaths {
			10 = {$plugin.tx_form.view.partialRootPath}
		}
		layoutRootPaths {
			10 = {$plugin.tx_form.view.layoutRootPath}
		}

		# elementPartials
		# Used by: frontend, wizard (not implemented at this time)
		# Overwriteable by user: FALSE
		#
		# This is the template selection array for the wizard
		# This items are shown for the element
		# If there is no partialPath property in the user configured element
		# than elementPartials.ELEMENTNAME.10.partialPath is the default
		elementPartials {
			BUTTON {
				10 {
					displayName = Default
					partialPath = FlatElements/Button
				}
			}
			BUTTONTAG {
				10 {
					displayName = Default
					partialPath = FlatElements/ButtonTag
				}
			}
			CHECKBOX {
				10 {
					displayName = Default
					partialPath = FlatElements/Checkbox
				}
			}
			FILEUPLOAD {
				10 {
					displayName = Default
					partialPath = FlatElements/Upload
				}
			}
			FORM {
				10 {
					displayName = Default
					partialPath = ContainerElements/Form
				}
			}
			HIDDEN {
				10 {
					displayName = Default
					partialPath = FlatElements/Hidden
				}
			}
			INPUT {
				10 {
					displayName = Default
					partialPath = FlatElements/Input
				}
			}
			INPUTTYPEBUTTON {
				10 {
					displayName = Default
					partialPath = FlatElements/InputTypeButton
				}
			}
			IMAGEBUTTON {
				10 {
					displayName = Default
					partialPath = FlatElements/Imagebutton
				}
			}
			PASSWORD {
				10 {
					displayName = Default
					partialPath = FlatElements/Password
				}
			}
			RADIO {
				10 {
					displayName = Default
					partialPath = FlatElements/Radio
				}
			}
			RESET {
				10 {
					displayName = Default
					partialPath = FlatElements/Reset
				}
			}
			SELECT {
				10 {
					displayName = Default
					partialPath = FlatElements/Select
				}
			}
			SUBMIT {
				10 {
					displayName = Default
					partialPath = FlatElements/Submit
				}
			}
			TEXTLINE {
				10 {
					displayName = Default
					partialPath = FlatElements/Textfield
				}
			}
			FIELDSET {
				10 {
					displayName = Default
					partialPath = ContainerElements/Fieldset
				}
			}
			RADIOGROUP {
				10 {
					displayName = Default
					partialPath = ContainerElements/Radiogroup
				}
			}
			CHECKBOXGROUP {
				10 {
					displayName = Default
					partialPath = ContainerElements/Checkboxgroup
				}
			}
			HEADER {
				10 {
					displayName = Default
					partialPath = FlatElements/Header
				}
			}
			TEXTAREA {
				10 {
					displayName = Default
					partialPath = FlatElements/Textarea
				}
			}
			TEXTBLOCK {
				10 {
					displayName = Default
					partialPath = FlatElements/Textblock
				}
			}

				# special definitions for internal usage
			LABEL {
				10 {
					displayName = Default
					partialPath = AdditionalElements/Label
				}
			}
				# useless for the wizard but needed for the frontend
			CONTENTELEMENT {
				10 {
					displayName = Default
					partialPath = FlatElements/ContentElement
				}
			}
		}
	}

	settings {
			# registeredValidators
			# Used by: frontend, wizard (not implemented at this time)
			# Overwriteable by user: FALSE
			#
			# This array hold all possible validators
			# displayName is planned for the wizard (not implemented at this time)
		registeredValidators {
			alphabetic {
				displayName = Alphabetic
				className = TYPO3\CMS\Form\Domain\Validator\AlphabeticValidator
			}
			alphanumeric {
				displayName = Alphanumeric
				className = TYPO3\CMS\Form\Domain\Validator\AlphanumericValidator
			}
			between {
				displayName = Between
				className = TYPO3\CMS\Form\Domain\Validator\BetweenValidator
			}
			date {
				displayName = Date
				className = TYPO3\CMS\Form\Domain\Validator\DateValidator
			}
			digit {
				displayName = Digit
				className = TYPO3\CMS\Form\Domain\Validator\DigitValidator
			}
			email {
				displayName = Email address
				className = TYPO3\CMS\Form\Domain\Validator\EmailValidator
			}
			equals {
				displayName = Equals
				className = TYPO3\CMS\Form\Domain\Validator\EqualsValidator
			}
			fileallowedtypes {
				displayName = Allowed mimetypes for file
				className = TYPO3\CMS\Form\Domain\Validator\FileAllowedTypesValidator
			}
			filemaximumsize {
				displayName = Maximum size for file (bytes)
				className = TYPO3\CMS\Form\Domain\Validator\FileMaximumSizeValidator
			}
			fileminimumsize {
				displayName = Minimum size for file (bytes)
				className = TYPO3\CMS\Form\Domain\Validator\FileMinimumSizeValidator
			}
			float {
				displayName = Float
				className = TYPO3\CMS\Form\Domain\Validator\FloatValidator
			}
			greaterthan {
				displayName = Greater than
				className = TYPO3\CMS\Form\Domain\Validator\GreaterThanValidator
			}
			inarray {
				displayName = In array
				className = TYPO3\CMS\Form\Domain\Validator\InArrayValidator
			}
			integer {
				displayName = Integer
				className = TYPO3\CMS\Form\Domain\Validator\IntegerValidator
			}
			ip {
				displayName = Ip address
				className = TYPO3\CMS\Form\Domain\Validator\IpValidator
			}
			length {
				displayName = Length
				className = TYPO3\CMS\Form\Domain\Validator\LengthValidator
			}
			lessthan {
				displayName = Less than
				className = TYPO3\CMS\Form\Domain\Validator\LessThanValidator
			}
			regexp {
				displayName = Regular Expression
				className = TYPO3\CMS\Form\Domain\Validator\RegExpValidator
			}
			required {
				displayName = Required
				className = TYPO3\CMS\Form\Domain\Validator\RequiredValidator
			}
			uri {
				displayName = Uniform Resource Identifier
				className = TYPO3\CMS\Form\Domain\Validator\UriValidator
			}
		}

			# registeredFilters
			# Used by: frontend, wizard (not implemented at this time)
			# Overwriteable by user: FALSE
			#
			# This array hold all possible filters
			# displayName is planned for the wizard (not implemented at this time)
		registeredFilters {
			alphabetic {
				displayName = Alphabetic
				className = TYPO3\CMS\Form\Domain\Filter\AlphabeticFilter
			}
			alphanumeric {
				displayName = Alphanumeric
				className = TYPO3\CMS\Form\Domain\Filter\AlphanumericFilter
			}
			currency {
				displayName = Currency
				className = TYPO3\CMS\Form\Domain\Filter\CurrencyFilter
			}
			digit {
				displayName = Digit
				className = TYPO3\CMS\Form\Domain\Filter\DigitFilter
			}
			integer {
				displayName = Integer
				className = TYPO3\CMS\Form\Domain\Filter\IntegerFilter
			}
			lowercase {
				displayName = Lowercase
				className = TYPO3\CMS\Form\Domain\Filter\LowerCaseFilter
			}
			regexp {
				displayName = Regular Expression
				className = TYPO3\CMS\Form\Domain\Filter\RegExpFilter
			}
			removexss {
				displayName = Remove XSS
				className = TYPO3\CMS\Form\Domain\Filter\RemoveXssFilter
			}
			stripnewlines {
				displayName = Strip New Lines
				className = TYPO3\CMS\Form\Domain\Filter\StripNewLinesFilter
			}
			titlecase {
				displayName = Titlecase
				className = TYPO3\CMS\Form\Domain\Filter\TitleCaseFilter
			}
			trim {
				displayName = Trim
				className = TYPO3\CMS\Form\Domain\Filter\TrimFilter
			}
			uppercase {
				displayName = Uppercase
				className = TYPO3\CMS\Form\Domain\Filter\UpperCaseFilter
			}
		}

		# the model definition
		registeredElements {

				# FORM
				# Used by: frontend, wizard (not implemented at this time)
				# Used viewhelper: f:form
				#
				# toDo: description
			FORM =< lib.tx_form.registeredElements.defaultModelDescription
			FORM {
				htmlAttributes {
					200 = action
					210 = accept-charset
					220 = autocomplete
					230 = enctype
					240 = method
					250 = name
					260 = novalidate
					270 = target
				}

				defaultHtmlAttributeValues {
					enctype = multipart/form-data
					method = post
				}

				htmlAttributesUsedByTheViewHelperDirectly =< lib.tx_form.htmlAttributesUsedByTheViewHelperDirectly.abstractTagBasedViewHelper
				htmlAttributesUsedByTheViewHelperDirectly {
						# FormViewHelper
					200 = enctype
					210 = method
					220 = name
					230 = onreset
					240 = onsubmit
				}

				viewHelperDefaulArguments {
					arguments {
					}
					additionalParams {
					}
					argumentsToBeExcludedFromQueryString {
					}
				}

					# FORM
					# Used by: frontend, wizard (not implemented at this time)
					# Overwriteable by user: TRUE
					#
					# There are two shipped themes
					# Default and Compstibility
					# The partial paths to the theme are build by the following rule
					# {$plugin.tx_form.view.partialRootPath}/themeName/@actionName
				themeName = Default
				partialPath =< plugin.tx_form.view.elementPartials.FORM.10.partialPath

				compatibilityMode = 1
			}

				# INPUT
				# Used by: frontend, wizard (not implemented at this time)
				# Used viewhelper: f:form.textfield
				#
				# toDo: description
			INPUT =< lib.tx_form.registeredElements.defaultModelDescription
			INPUT {
				htmlAttributes {
					200 = type
					210 = accept
					220 = autocomplete
					230 = alt
					240 = autofocus
					250 = checked
					260 = disabled
					270 = height
					280 = inputmode
					290 = list
					300 = max
					310 = maxlength
					320 = min
					330 = minlength
					340 = multiple
					350 = name
					360 = pattern
					370 = placeholder
					380 = readonly
					390 = required
					400 = size
					410 = src
					420 = step
					430 = value
					440 = width
				}

				htmlAttributesUsedByTheViewHelperDirectly =< lib.tx_form.htmlAttributesUsedByTheViewHelperDirectly.abstractFormFieldViewHelper
				htmlAttributesUsedByTheViewHelperDirectly {
						# TextfieldViewHelper
					200 = autofocus
					210 = maxlength
					220 = size
					230 = placeholder
					240 = pattern
					250 = required
					260 = type
				}

				partialPath =< plugin.tx_form.view.elementPartials.INPUT.10.partialPath
			}

				# CHECKBOX
				# Used by: frontend, wizard (not implemented at this time)
				# Used viewhelper: f:form.checkbox
				#
				# toDo: description
			CHECKBOX =< lib.tx_form.registeredElements.defaultModelDescription
			CHECKBOX {
				htmlAttributes {
					200 = type
					210 = accept
					220 = autocomplete
					230 = alt
					240 = autofocus
					250 = checked
					260 = disabled
					270 = height
					280 = inputmode
					290 = list
					300 = max
					310 = maxlength
					320 = min
					330 = minlength
					340 = multiple
					350 = name
					360 = pattern
					370 = placeholder
					380 = readonly
					390 = required
					400 = size
					410 = src
					420 = step
					430 = value
					440 = width
				}

				fixedHtmlAttributeValues {
					type = checkbox
				}

				htmlAttributesUsedByTheViewHelperDirectly =< lib.tx_form.htmlAttributesUsedByTheViewHelperDirectly.abstractFormFieldViewHelper
				htmlAttributesUsedByTheViewHelperDirectly {
						# CheckboxViewHelper
					200 = checked
					210 = multiple
				}

				partialPath =< plugin.tx_form.view.elementPartials.CHECKBOX.10.partialPath
			}

				# FILEUPLOAD
				# Used by: frontend, wizard (not implemented at this time)
				# Used viewhelper: f:form.upload
				#
				# toDo: description
			FILEUPLOAD =< lib.tx_form.registeredElements.defaultModelDescription
			FILEUPLOAD {
				htmlAttributes {
					200 = type
					210 = accept
					220 = autocomplete
					230 = alt
					240 = autofocus
					250 = checked
					260 = disabled
					270 = height
					280 = inputmode
					290 = list
					300 = max
					310 = maxlength
					320 = min
					330 = minlength
					340 = multiple
					350 = name
					360 = pattern
					370 = placeholder
					380 = readonly
					390 = required
					400 = size
					410 = src
					420 = step
					430 = value
					440 = width
				}

				fixedHtmlAttributeValues {
					type = file
				}

				htmlAttributesUsedByTheViewHelperDirectly =< lib.tx_form.htmlAttributesUsedByTheViewHelperDirectly.abstractFormFieldViewHelper
				htmlAttributesUsedByTheViewHelperDirectly {
						# UploadViewHelper
					200 = multiple
				}

				partialPath =< plugin.tx_form.view.elementPartials.FILEUPLOAD.10.partialPath
			}

				# HIDDEN
				# Used by: frontend, wizard (not implemented at this time)
				# Used viewhelper: f:form.hidden
				#
				# toDo: description
			HIDDEN =< lib.tx_form.registeredElements.defaultModelDescription
			HIDDEN {
				htmlAttributes {
					200 = type
					210 = accept
					220 = autocomplete
					230 = alt
					240 = autofocus
					250 = checked
					260 = disabled
					270 = height
					280 = inputmode
					290 = list
					300 = max
					310 = maxlength
					320 = min
					330 = minlength
					340 = multiple
					350 = name
					360 = pattern
					370 = placeholder
					380 = readonly
					390 = required
					400 = size
					410 = src
					420 = step
					430 = value
					440 = width
				}

				fixedHtmlAttributeValues {
					type = hidden
				}

				htmlAttributesUsedByTheViewHelperDirectly =< lib.tx_form.htmlAttributesUsedByTheViewHelperDirectly.abstractFormFieldViewHelper

				partialPath =< plugin.tx_form.view.elementPartials.HIDDEN.10.partialPath

				visibleInConfirmationAction = 0
				visibleInMail = 0
			}

				# IMAGEBUTTON
				# Used by: frontend, wizard (not implemented at this time)
				# Used viewhelper: f:form.textfield
				# Deprecated
				#
				# toDo: description
			IMAGEBUTTON =< lib.tx_form.registeredElements.defaultModelDescription
			IMAGEBUTTON {
				htmlAttributes {
					200 = type
					210 = accept
					220 = autocomplete
					230 = alt
					240 = autofocus
					250 = checked
					260 = disabled
					270 = height
					280 = inputmode
					290 = list
					300 = max
					310 = maxlength
					320 = min
					330 = minlength
					340 = multiple
					350 = name
					360 = pattern
					370 = placeholder
					380 = readonly
					390 = required
					400 = size
					410 = src
					420 = step
					430 = value
					440 = width
				}

				fixedHtmlAttributeValues {
					type = image
				}

				htmlAttributesUsedByTheViewHelperDirectly =< lib.tx_form.htmlAttributesUsedByTheViewHelperDirectly.abstractFormFieldViewHelper
				htmlAttributesUsedByTheViewHelperDirectly {
						# TextfieldViewHelper
					200 = autofocus
					210 = maxlength
					220 = size
					230 = placeholder
					240 = pattern
					250 = required
					260 = type
				}

				partialPath =< plugin.tx_form.view.elementPartials.IMAGEBUTTON.10.partialPath

				visibleInConfirmationAction = 0
				visibleInMail = 0
			}

				# PASSWORD
				# Used by: frontend, wizard (not implemented at this time)
				# Used viewhelper: f:form.password
				#
				# toDo: description
			PASSWORD =< lib.tx_form.registeredElements.defaultModelDescription
			PASSWORD {
				htmlAttributes {
					200 = type
					210 = accept
					220 = autocomplete
					230 = alt
					240 = autofocus
					250 = checked
					260 = disabled
					270 = height
					280 = inputmode
					290 = list
					300 = max
					310 = maxlength
					320 = min
					330 = minlength
					340 = multiple
					350 = name
					360 = pattern
					370 = placeholder
					380 = readonly
					390 = required
					400 = size
					410 = src
					420 = step
					430 = value
					440 = width
				}

				fixedHtmlAttributeValues {
					type = password
				}

				htmlAttributesUsedByTheViewHelperDirectly =< lib.tx_form.htmlAttributesUsedByTheViewHelperDirectly.abstractFormFieldViewHelper
				htmlAttributesUsedByTheViewHelperDirectly {
						# PasswordViewHelper
					200 = maxlength
					210 = size
				}

				partialPath =< plugin.tx_form.view.elementPartials.PASSWORD.10.partialPath

				visibleInConfirmationAction = 0
				visibleInMail = 0
			}

				# RADIO
				# Used by: frontend, wizard (not implemented at this time)
				# Used viewhelper: f:form.radio
				#
				# toDo: description
			RADIO =< lib.tx_form.registeredElements.defaultModelDescription
			RADIO {
				htmlAttributes {
					200 = type
					210 = accept
					220 = autocomplete
					230 = alt
					240 = autofocus
					250 = checked
					260 = disabled
					270 = height
					280 = inputmode
					290 = list
					300 = max
					310 = maxlength
					320 = min
					330 = minlength
					340 = multiple
					350 = name
					360 = pattern
					370 = placeholder
					380 = readonly
					390 = required
					400 = size
					410 = src
					420 = step
					430 = value
					440 = width
				}

				fixedHtmlAttributeValues {
					type = radio
				}

				htmlAttributesUsedByTheViewHelperDirectly =< lib.tx_form.htmlAttributesUsedByTheViewHelperDirectly.abstractFormFieldViewHelper
				htmlAttributesUsedByTheViewHelperDirectly {
						# RadioViewHelper
					200 = checked
				}

				partialPath =< plugin.tx_form.view.elementPartials.RADIO.10.partialPath
			}

				# RESET
				# Used by: frontend, wizard (not implemented at this time)
				# Used viewhelper: f:form.textfield
				#
				# toDo: description
			RESET =< lib.tx_form.registeredElements.defaultModelDescription
			RESET {
				htmlAttributes {
					200 = type
					210 = accept
					220 = autocomplete
					230 = alt
					240 = autofocus
					250 = checked
					260 = disabled
					270 = height
					280 = inputmode
					290 = list
					300 = max
					310 = maxlength
					320 = min
					330 = minlength
					340 = multiple
					350 = name
					360 = pattern
					370 = placeholder
					380 = readonly
					390 = required
					400 = size
					410 = src
					420 = step
					430 = value
					440 = width
				}

				fixedHtmlAttributeValues {
					type = reset
				}

				htmlAttributesUsedByTheViewHelperDirectly =< lib.tx_form.htmlAttributesUsedByTheViewHelperDirectly.abstractFormFieldViewHelper
				htmlAttributesUsedByTheViewHelperDirectly {
						# TextfieldViewHelper
					210 = autofocus
					220 = maxlength
					230 = size
					240 = placeholder
					250 = pattern
					260 = required
					270 = type
				}

				partialPath =< plugin.tx_form.view.elementPartials.RESET.10.partialPath

				visibleInConfirmationAction = 0
				visibleInMail = 0
			}

				# SUBMIT
				# Used by: frontend, wizard (not implemented at this time)
				# Used viewhelper: f:form.submit
				#
				# toDo: description
			SUBMIT =< lib.tx_form.registeredElements.defaultModelDescription
			SUBMIT {
				htmlAttributes {
					200 = type
					210 = accept
					220 = autocomplete
					230 = alt
					240 = autofocus
					250 = checked
					260 = disabled
					270 = height
					280 = inputmode
					290 = list
					300 = max
					310 = maxlength
					320 = min
					330 = minlength
					340 = multiple
					350 = name
					360 = pattern
					370 = placeholder
					380 = readonly
					390 = required
					400 = size
					410 = src
					420 = step
					430 = value
					440 = width
				}

				fixedHtmlAttributeValues {
					type = submit
				}

				htmlAttributesUsedByTheViewHelperDirectly =< lib.tx_form.htmlAttributesUsedByTheViewHelperDirectly.abstractFormFieldViewHelper

				partialPath =< plugin.tx_form.view.elementPartials.SUBMIT.10.partialPath

				visibleInConfirmationAction = 0
				visibleInMail = 0
			}

				# TEXTLINE
				# Used by: frontend, wizard (not implemented at this time)
				# Used viewhelper: f:form.textfield
				#
				# toDo: description
			TEXTLINE =< lib.tx_form.registeredElements.defaultModelDescription
			TEXTLINE {
				htmlAttributes {
					200 = type
					210 = accept
					220 = autocomplete
					230 = alt
					240 = autofocus
					250 = checked
					260 = disabled
					270 = height
					280 = inputmode
					290 = list
					300 = max
					310 = maxlength
					320 = min
					330 = minlength
					340 = multiple
					350 = name
					360 = pattern
					370 = placeholder
					380 = readonly
					390 = required
					400 = size
					410 = src
					420 = step
					430 = value
					440 = width
				}

				fixedHtmlAttributeValues {
					type = text
				}

				htmlAttributesUsedByTheViewHelperDirectly =< lib.tx_form.htmlAttributesUsedByTheViewHelperDirectly.abstractFormFieldViewHelper
				htmlAttributesUsedByTheViewHelperDirectly {
						# TextfieldViewHelper
					200 = autofocus
					210 = maxlength
					220 = size
					230 = placeholder
					240 = pattern
					250 = required
					260 = type
				}

				partialPath =< plugin.tx_form.view.elementPartials.TEXTLINE.10.partialPath
			}

				# TEXTAREA
				# Used by: frontend, wizard (not implemented at this time)
				# Used viewhelper: f:form.textarea
				#
				# toDo: description
			TEXTAREA =< lib.tx_form.registeredElements.defaultModelDescription
			TEXTAREA {
				htmlAttributes {
					200 = autocomplete
					210 = autofocus
					220 = cols
					230 = disabled
					240 = maxlength
					250 = minlength
					260 = name
					270 = placeholder
					280 = readonly
					290 = required
					300 = rows
					310 = selectionDirection
					320 = selectionEnd
					330 = selectionStart
					340 = wrap
				}

				htmlAttributesUsedByTheViewHelperDirectly =< lib.tx_form.htmlAttributesUsedByTheViewHelperDirectly.abstractFormFieldViewHelper
				htmlAttributesUsedByTheViewHelperDirectly {
						# TextareaViewHelper
					200 = autofocus
					210 = rows
					220 = cols
					230 = placeholder
				}

				partialPath =< plugin.tx_form.view.elementPartials.TEXTAREA.10.partialPath
			}

				# SELECT
				# Used by: frontend, wizard (not implemented at this time)
				# Used viewhelper: form:select (extends f:form.select)
				#
				# toDo: description
			SELECT =< lib.tx_form.registeredElements.defaultModelDescription
			SELECT {
				htmlAttributes {
					200 = autofocus
					210 = disabled
					220 = multiple
					230 = name
					240 = required
					250 = size
				}

				htmlAttributesUsedByTheViewHelperDirectly =< lib.tx_form.htmlAttributesUsedByTheViewHelperDirectly.abstractFormFieldViewHelper
				htmlAttributesUsedByTheViewHelperDirectly {
						# SelectViewHelper
					120 = multiple
					130 = size
				}

				partialPath =< plugin.tx_form.view.elementPartials.SELECT.10.partialPath
			}

				# OPTION
				# Used by: frontend, wizard (not implemented at this time)
				# Used viewhelper: form:select (extends f:form.select)
				#
				# We need this element to define select options via Typoscript
				# but the rendering is made with the select viewhelper.
				# That is the reason why we do not need a partialPath definition
				# toDo: description
			OPTION =< lib.tx_form.registeredElements.defaultModelDescription
			OPTION {
				htmlAttributes {
					200 = disabled
					210 = label
					220 = selected
					230 = value
				}

				htmlAttributesUsedByTheViewHelperDirectly {
					10 = label
					20 = value
				}
			}

				# OPTGROUP
				# Used by: frontend, wizard (not implemented at this time)
				# Used viewhelper: form:select (extends f:form.select)
				#
				# We need this element to define select options via Typoscript
				# but the rendering is made with the select viewhelper.
				# That is the reason why we do not need a partialPath definition
				# toDo: description
			OPTGROUP =< lib.tx_form.registeredElements.defaultModelDescription
			OPTGROUP {
				htmlAttributes {
					200 = disabled
					210 = label
				}

				htmlAttributesUsedByTheViewHelperDirectly {
					10 = label
				}
			}

				# BUTTONTAG
				# Used by: frontend, wizard (not implemented at this time)
				# Used viewhelper: f:form.button
				#
				# # Generates a element <button type="..." />
			BUTTONTAG =< lib.tx_form.registeredElements.defaultModelDescription
			BUTTONTAG {
				htmlAttributes {
					200 = autofocus
					210 = disabled
					220 = name
					230 = type
					240 = value
				}

				htmlAttributesUsedByTheViewHelperDirectly =< lib.tx_form.htmlAttributesUsedByTheViewHelperDirectly.abstractFormFieldViewHelper
				htmlAttributesUsedByTheViewHelperDirectly {
						# ButtonViewHelper
					120 = autofocus
					130 = type
				}

				partialPath =< plugin.tx_form.view.elementPartials.BUTTONTAG.10.partialPath

				visibleInConfirmationAction = 0
				visibleInMail = 0
			}

				# INPUTTYPEBUTTON
				# Used by: frontend, wizard (not implemented at this time)
				# Used viewhelper: f:form.textfield
				#
				# Generates a element <input type="button" />
			INPUTTYPEBUTTON =< lib.tx_form.registeredElements.defaultModelDescription
			INPUTTYPEBUTTON {
				htmlAttributes {
					200 = type
					210 = accept
					220 = autocomplete
					230 = alt
					240 = autofocus
					250 = checked
					260 = disabled
					270 = height
					280 = inputmode
					290 = list
					300 = max
					310 = maxlength
					320 = min
					330 = minlength
					340 = multiple
					350 = name
					360 = pattern
					370 = placeholder
					380 = readonly
					390 = required
					400 = size
					410 = src
					420 = step
					430 = value
					440 = width
				}

				fixedHtmlAttributeValues {
					type = button
				}

				htmlAttributesUsedByTheViewHelperDirectly =< lib.tx_form.htmlAttributesUsedByTheViewHelperDirectly.abstractFormFieldViewHelper
				htmlAttributesUsedByTheViewHelperDirectly {
						# TextfieldViewHelper
					200 = autofocus
					210 = maxlength
					220 = size
					230 = placeholder
					240 = pattern
					250 = required
					260 = type
				}

				partialPath =< plugin.tx_form.view.elementPartials.INPUTTYPEBUTTON.10.partialPath

				visibleInConfirmationAction = 0
				visibleInMail = 0
			}

				# BUTTON
				# Used by: frontend, wizard (not implemented at this time)
				# Used viewhelper: f:form.button
				#
				# A historical element whch generates a <input type="button" />
				# To be compatible its a copy of the new element INPUTTYPEBUTTON
				# If you want to use a <button /> tag, you must write
				# BUTTON =< .BUTTONTAG or use the BUTTONTAG directly
			BUTTON =< .INPUTTYPEBUTTON
			BUTTON {
				partialPath =< plugin.tx_form.view.elementPartials.INPUTTYPEBUTTON.10.partialPath
			}

				# FIELDSET
				# Used by: frontend, wizard (not implemented at this time)
				# Used viewhelper: none
				#
				# This is a container element
				# toDo: description
			FIELDSET =< lib.tx_form.registeredElements.defaultModelDescription
			FIELDSET {
				htmlAttributes {
					200 = disabled
					210 = name
				}

				partialPath =< plugin.tx_form.view.elementPartials.FIELDSET.10.partialPath

				visibleInConfirmationAction = 0
				visibleInMail = 0
			}

				# CHECKBOXGROUP
				# Used by: frontend, wizard (not implemented at this time)
				# Used viewhelper: none
				#
				# This is a container element
				# toDo: description
			CHECKBOXGROUP =< .FIELDSET
			CHECKBOXGROUP {
				partialPath =< plugin.tx_form.view.elementPartials.CHECKBOXGROUP.10.partialPath

				childsInerhitName = 1

				visibleInConfirmationAction = 1
				visibleInMail = 1
			}

				# RADIOGROUP
				# Used by: frontend, wizard (not implemented at this time)
				# Used viewhelper: none
				#
				# This is a container element
				# toDo: description
			RADIOGROUP =< .FIELDSET
			RADIOGROUP {
				partialPath =< plugin.tx_form.view.elementPartials.RADIOGROUP.10.partialPath

				childsInerhitName = 1

				visibleInConfirmationAction = 1
				visibleInMail = 1
			}

				# HEADER
				# Used by: frontend, wizard (not implemented at this time)
				# Used viewhelper: f:format.raw
				#
				# toDo: description
			HEADER =< lib.tx_form.registeredElements.defaultModelDescription
			HEADER {
				partialPath =< plugin.tx_form.view.elementPartials.HEADER.10.partialPath

				visibleInConfirmationAction = 0
				visibleInMail = 0
			}

				# TEXTBLOCK
				# Used by: frontend, wizard (not implemented at this time)
				# Used viewhelper: f:format.raw
				#
				# toDo: description
			TEXTBLOCK =< lib.tx_form.registeredElements.defaultModelDescription
			TEXTBLOCK {
				htmlAttributes >
				partialPath =< plugin.tx_form.view.elementPartials.TEXTBLOCK.10.partialPath

				visibleInConfirmationAction = 0
				visibleInMail = 0
			}

				# CONTENTELEMENT
				# Used by: frontend
				# Used viewhelper: none
				#
				# This is an internal element but some thing should be configurable
				# like the visibility and the used partial path.
				#
				# toDo: description
			CONTENTELEMENT =< lib.tx_form.registeredElements.defaultModelDescription
			CONTENTELEMENT {
				partialPath =< plugin.tx_form.view.elementPartials.CONTENTELEMENT.10.partialPath

				visibleInConfirmationAction = 0
				visibleInMail = 0
			}
		}
	}
}
